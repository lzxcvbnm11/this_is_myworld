/***************************************************************************** | Copyright |----------------------------------------------------------------------------- | Copyright (c) by SAIC Motor Co. LTD. All rights reserved. | | This software is furnished under a license and may be used and copied  | only in accordance with the terms of such license and with the inclusion | of the above copyright notice. This software or any other copies thereof  | may not be provided or otherwise made available to any other person. | No title to and ownership of the software is hereby transferred. | | The information in this software is subject to change without notice  | and should not be construed as a commitment by  | SAIC Motor Co. LTD. | | SAIC Motor Co. LTD. assumes no responsibility for the use or reliability | of its Software on equipment which is not supported by SAIC Motor Co. LTD. |----------------------------------------------------------------------------- ******************************************************************************/ /******************************************************************************/ /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr Version 15.06.04.0.0.2 */ /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr Name Date changeLog */ /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr 李秋实 2014/11/26 增加一些操作循环定义 */ /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr 李秋实 2015/06/04 增加一些接口的定义 */ /******************************************************************************/ #ifndef _S_FM_APP_H #define _S_FM_APP_H   #include "s_fm_typeDef.h" #include "bat_public.h" #include "odo_public.h" #include "sys_public.h" #include "nvm_public.h" #include "rtc_public.h" #include "wfm_public.h" #include "v_nwm.h" #include "nwm_core.h" #include "v_hand.h" #include "nwd_public.h" #include "pwr_public.h"  /**********************************宏定义**************************************/ #define DISABLE 0 #define ENABLE 1  #define TRIGGER 1 #define NOTTRIGGER 0  #define OPEN 1 #define CLOSED 0  #define FAILED 1 #define PASSED 0  #define CHANGED 1 #define NOTCHANGED 0  #define DEALING 1 #define DEALED 0  #define ERROR 1 #define OK 0  #define LASTSNAP 2 #define FIRSTSNAP 1 #define DTCSTORE 0  #define NOTCOMPLETE 1 #define COMPLETE 0  #define NEED_TO_WRITE 1 #define NO_NEED 0  #define IG_CYCLE 0 #define DRIVE_CYCLE 1 #define WARM_CYCLE 2 #define WAKEUP_CYCLE 3 #define KL30_CYCLE 4 #define ENGINE_CYCLE 5 #define POWERUP_CYCLE 6 #define COMMENABLE_CYCLE 7 #define OPERATION_CYCLE 8 #define CYCLENUM 0x09  #define CYCLE_START 0 #define CYCLING 1 #define CYCLE_END 2 #define NOT_IN_CYCLE 3  #define LENOF010X 0x10  #define DTCSTOINFOLEN 0x08  #define DTCLEN 0x03  #define BIT0ON 0 #define BIT3ON 3 #define NOTSUPLIT 0xFF #define BIT0OFF 0x10 #define CYCLEENDOFF 0x00 #define ONECYCLEOFF 0x01 #define TWOCYCLEOFF 0x02 #define THREECYCLEOFF 0x03 #define FOURCYCLEOFF 0x04 #define FIVECYCLEOFF 0x05  #define NO_AREA_TO_STORE 0xFF #define NOTSTORED 0xFF #define NOTFIND 0xFF  #define TRUE 0x01  #define FALSE 0x00      #define LYY_DEBUG_WHILE1 1  static const NVMKeyBlock_ENUM wr_dtchanlde_table [39] ={ INDEX_NVM_DTC01,  INDEX_NVM_DTC02,  INDEX_NVM_DTC03,  INDEX_NVM_DTC04,  INDEX_NVM_DTC05,  INDEX_NVM_DTC06,  INDEX_NVM_DTC07,  INDEX_NVM_DTC08,  INDEX_NVM_DTC09,  INDEX_NVM_DTC10,  INDEX_NVM_DTC11,  INDEX_NVM_DTC12,  INDEX_NVM_DTC13,  INDEX_NVM_DTC14,  INDEX_NVM_DTC15,  INDEX_NVM_DTC16,  INDEX_NVM_DTC17,  INDEX_NVM_DTC18,  INDEX_NVM_DTC19,  INDEX_NVM_DTC20,  INDEX_NVM_DTC21,  INDEX_NVM_DTC22,  INDEX_NVM_DTC23,  INDEX_NVM_DTC24,  INDEX_NVM_DTC25,  INDEX_NVM_DTC26,  INDEX_NVM_DTC27,  INDEX_NVM_DTC28,  INDEX_NVM_DTC29,  INDEX_NVM_DTC30,  INDEX_NVM_DTC31,  INDEX_NVM_DTC32,  INDEX_NVM_DTC33,  INDEX_NVM_DTC34,  INDEX_NVM_DTC35,  INDEX_NVM_DTC36,  INDEX_NVM_DTC37,  INDEX_NVM_DTC38,  INDEX_NVM_DTC39  };  static const NVMKeyBlock_ENUM wr_snapshothandle_table [10] ={ INDEX_NVM_SNAPSHORT01,  INDEX_NVM_SNAPSHORT02,  INDEX_NVM_SNAPSHORT03,  INDEX_NVM_SNAPSHORT04,  INDEX_NVM_SNAPSHORT05,  INDEX_NVM_SNAPSHORT06,  INDEX_NVM_SNAPSHORT07,  INDEX_NVM_SNAPSHORT08,  INDEX_NVM_SNAPSHORT09,  INDEX_NVM_SNAPSHORT10 };  static const NVMKeyBlock_ENUM rd_dtchandle_table [39] ={ INDEX_NVM_DTC01,  INDEX_NVM_DTC02,  INDEX_NVM_DTC03,  INDEX_NVM_DTC04,  INDEX_NVM_DTC05,  INDEX_NVM_DTC06,  INDEX_NVM_DTC07,  INDEX_NVM_DTC08,  INDEX_NVM_DTC09,  INDEX_NVM_DTC10,  INDEX_NVM_DTC11,  INDEX_NVM_DTC12,  INDEX_NVM_DTC13,  INDEX_NVM_DTC14,  INDEX_NVM_DTC15,  INDEX_NVM_DTC16,  INDEX_NVM_DTC17,  INDEX_NVM_DTC18,  INDEX_NVM_DTC19,  INDEX_NVM_DTC20,  INDEX_NVM_DTC21,  INDEX_NVM_DTC22,  INDEX_NVM_DTC23,  INDEX_NVM_DTC24,  INDEX_NVM_DTC25,  INDEX_NVM_DTC26,  INDEX_NVM_DTC27,  INDEX_NVM_DTC28,  INDEX_NVM_DTC29,  INDEX_NVM_DTC30,  INDEX_NVM_DTC31,  INDEX_NVM_DTC32,  INDEX_NVM_DTC33,  INDEX_NVM_DTC34,  INDEX_NVM_DTC35,  INDEX_NVM_DTC36,  INDEX_NVM_DTC37,  INDEX_NVM_DTC38,  INDEX_NVM_DTC39   };  static const NVMKeyBlock_ENUM rd_snapshothandle_table [10] ={ INDEX_NVM_SNAPSHORT01,  INDEX_NVM_SNAPSHORT02,  INDEX_NVM_SNAPSHORT03,  INDEX_NVM_SNAPSHORT04,  INDEX_NVM_SNAPSHORT05,  INDEX_NVM_SNAPSHORT06,  INDEX_NVM_SNAPSHORT07,  INDEX_NVM_SNAPSHORT08,  INDEX_NVM_SNAPSHORT09,  INDEX_NVM_SNAPSHORT10 };   /********************************变量声明**************************************/ /*外部变量*/ extern const s_uint8 v_fm_taskCycleTime; /*FM调度周期*/ extern const s_uint16 v_fm_allNumOfDtc; /*配置所有支持故障码的数量*/ extern const s_uint16 v_fm_stoNumOfDtc; /*配置能够存储故障码的数量*/  extern const s_uint16 v_fm_stoNumOfSnapshot; /*配置能够存储快照的数量*/  extern const s_uint8 v_fm_DtcStatusMask; /*支持的故障码掩码*/ extern volatile s_fm_dtc s_fm_dtc_ram[]; /*故障码的RAM区*/ extern volatile s_uint8 cycleStateRamPre[]; extern volatile s_bool testFailedPre[]; /*初始化时存储上一次故障状态的缓存*/  extern const s_bool v_fm_secondSnapshotSupported; /*是否支持第二快照*/ extern const s_fm_globalSnapshot s_fm_globalSnapshotRam; /*全局快照信息*/ extern const s_fm_localSnapshot s_fm_localSnapshotRam[]; /*局部快照信息*/ extern volatile s_fm_StoreInfo s_fm_DTCStoreList[]; /*故障码存储信息*/ extern volatile s_fm_StoreInfo s_fm_FirstSnapStoreList[]; /*快照一存储信息*/ extern volatile s_fm_StoreInfo s_fm_LastSnapStoreList[]; /*快照二存储信息*/  /*内部变量*/ extern volatile s_uint8 DTCEnable; /*DTC是否使能*/  extern volatile s_uint8 CouldPowerDown; extern volatile s_bool DTCSetFlag; /********************************函数声明**************************************/ /*内部接口*/ extern void f_fm_ramInit(void); extern void f_fm_eepromInfoInit(void); extern void f_fm_eepromDTCInfoInit(void); extern void f_fm_eepromFirstSnapInfoInit(void); extern void f_fm_eepromLastSnapInfoInit(void); extern void f_fm_DTCHandling(s_uint8 i,s_uint8 cycleState); extern void f_fm_olded(s_uint8 i); extern void f_fm_detect(void); extern void f_fm_setWriteFlag(s_uint8 statusBuf,s_uint8 i); extern s_bool f_fm_light(s_uint8 i, s_uint8 bit0, s_uint8 bit1, s_uint8 bit3, s_uint8 bit7, s_uint8 cycleStatus); extern void f_fm_bit0(s_uint8 bit0,s_uint8 bit0pre,s_uint8 i); extern void f_fm_bit1(s_uint8 bit1,s_uint8 bit1pre,s_uint8 i); extern void f_fm_writeSnapshot(s_uint8 i_DTCram, s_uint8 snap_type); extern s_uint8 f_fm_getStoreID(s_uint8 i_DTCram, s_uint8 store_type); extern s_uint8 f_fm_getAlreadyStoredID(s_uint8 i_DTCram, s_fm_StoreInfo *buf,s_uint8 len); extern s_uint8 f_fm_getIdleID(s_uint8 i_DTCram, s_fm_StoreInfo *buf,s_uint8 len); extern s_uint8 f_fm_getRepleaceID(s_uint8 i_DTCram, s_fm_StoreInfo *buf); extern void f_fm_bufSort(s_fm_StoreInfo *buf,s_uint8 len); extern void f_fm_clearDTCSnapshot(s_uint8 i_DTCram); extern s_uint8 f_fm_checkDTCRamPosBySep(s_uint16 dtc, s_uint8 f_type); extern s_uint8 f_fm_checkDTCRamPosByWhole(s_uint32 dtc_code); extern s_uint8 f_fm_checkFirastSnapIDByRam(s_uint8 Ram); extern s_uint8 f_fm_checkLastSnapIDByRam(s_uint8 Ram); extern s_uint8 f_fm_samePrioritycompare(s_uint8 ram1,s_uint8 ram2); extern s_uint8 f_fm_checkSnapInfoBySep(s_uint16 dtc, s_uint8 f_type); extern s_uint8 f_fm_checkSnapInfoByDtc(s_uint32 dtc_code); extern void f_fm_DTCTrigger(void); extern void f_fm_storeDTC(s_uint16 i); /*callout*/ extern s_uint8 f_fm_cyclecheck(s_uint8 cycle_type); extern void f_fm_writeDTC(s_uint16 i, s_uint8 *data , s_uint8 len); extern void f_fm_writeFirstSnapshot(s_uint16 i, s_uint8 *data , s_uint8 len); extern void f_fm_writeLastSnapshot(s_uint16 i, s_uint8 *data , s_uint8 len); extern void f_fm_readDTCFromEEPROM(s_uint16 i, s_uint8 *data , s_uint8 len); extern void f_fm_readFirstSnapshotFromEEPROM(s_uint16 i, s_uint8 *data , s_uint8 len); extern void f_fm_readLastSnapshotFromEEPROM(s_uint16 i, s_uint8 *data , s_uint8 len); extern void f_fm_readDID(s_uint16 DID, s_uint8 *data , s_uint8 len); extern void f_fm_sendDTCTrigger(s_uint8 *data , s_uint8 len); extern s_bool f_fm_getTriggerCANbusStatus(void);   /*外部接口*/ extern void f_fm_cfgInit(void); extern void f_fm_init(void); extern void f_fm_task(void); extern s_uint8 f_fm_configCheck(void); extern void f_fm_setDTC(s_uint32 dtc_code,s_bool state); extern void f_fm_setDTCByNo(s_uint8 location,s_bool state); extern s_bool f_fm_checkDTCByNo(s_uint8 location); extern s_bool f_fm_checkDTC(s_uint32 dtc_code); extern void f_fm_controlDTCDealing(s_uint8 State); extern void f_fm_clearDTC(void); extern s_uint8 f_fm_clearDTCslow(void); extern void f_fm_readDTCNum(s_uint8 mask, s_uint8* data, s_uint16 *len); extern void f_fm_readDTCLogged(s_uint8 mask, s_uint8* data, s_uint16 *len); extern void f_fm_readAllDTC(s_uint8* data, s_uint16 *len); extern s_uint8 f_fm_readDTCSnapshot(s_uint32 dtc_code, s_uint8 RecordNum, s_uint8* data, s_uint16 *len); extern s_uint8 f_fm_readDTCExtendData(s_uint32 dtc_code, s_uint8* data, s_uint16 *len); extern s_bool f_fm_getCouldPowerDownState(void); extern void f_fm_configDTC(s_uint32 dtc_code,s_bool state);   #endif  /*=========================================================================== lib s_fm_api.h s_fm_app.h s_fm_callout.c s_fm_config.c s_fm_config.h s_fm_typeDef.h File Revision History (bottom to top: first revision to last revision) *============================================================================ lib s_fm_api.h s_fm_app.h s_fm_callout.c s_fm_config.c s_fm_config.h s_fm_typeDef.h $Log:$  lib s_fm_api.h s_fm_app.h s_fm_callout.c s_fm_config.c s_fm_config.h s_fm_typeDef.h Rev: Userid: Date: (Description on following lines: CR #, etc.) lib s_fm_api.h s_fm_app.h s_fm_callout.c s_fm_config.c s_fm_config.h s_fm_typeDef.h ------- ------------ ----------- * *===========================================================================*/
