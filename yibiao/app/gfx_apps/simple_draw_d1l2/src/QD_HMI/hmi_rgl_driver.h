#ifndef _HMI_QD_RGL_DRIVER_H #define _HMI_QD_RGL_DRIVER_H  #define Z_TRANS 1.75f  #define SZ 1.0f   #define FB_SX HMI_MAX_WIDTH #define FB_SY HMI_MAX_HEIGHT  #define Z_ACCEL 0.001f  #define HMI_CHAR_SPACE 0   #define CUBE_BASE_ANGLE 0.25f  #define HMI_INVALID_CHAR 0x3F  #define HMI_GB2312_HB_MAX 0xF7 #define HMI_GB2312_HB_MIN 0xA1 #define HMI_GB2312_LB_MAX 0xFE #define HMI_GB2312_LB_MIN 0xA1  #define HMI_GBK_HB_MAX 0xFE #define HMI_GBK_HB_MIN 0x81 #define HMI_GBK_LB_MAX 0xFE #define HMI_GBK_LB_MIN 0x40 #define HMI_GBK_LB_INVALID 0x7F  #define HMI_BIG5_HB_MAX 0xFE #define HMI_BIG5_HB_MIN 0xA0 #define HMI_BIG5_LB_MAX 0xFE #define HMI_BIG5_LB_MID1 0xA1 #define HMI_BIG5_LB_MID2 0x7E #define HMI_BIG5_LB_MIN 0x40  #define HMI_SJIS_HB_MAX 0xFC #define HMI_SJIS_HB_MID1 0xE0 #define HMI_SJIS_HB_MID2 0x9F #define HMI_SJIS_HB_MIN 0x81 #define HMI_SJIS_LB_MAX 0xFC #define HMI_SJIS_LB_MID1 0x80 #define HMI_SJIS_LB_MID2 0x7E #define HMI_SJIS_LB_MIN 0x40  #define HMI_SJIS_ASCII_MAX 0xDF #define HMI_SJIS_ASCII_MID1 0xA0 #define HMI_SJIS_ASCII_MID2 0x7F #define HMI_SJIS_ASCII_MIN 0x00 #define HMI_INVALIATE_FONT_ID 0xff  #define HMI_FLOAT_TOLERANCE 0.000001 #define HMI_GET_BUFFER_CNT 200  #define HMI_LAYER_MAX_CNT 4 #define HMI_VIDEO_CAPTURE_WM_BOTTOM 1 #define HMI_STRIDE(W) (((W+127)>>7)<<7) #define HMI_STRIDE_256(W) (((W+255)>>8)<<8) #define HMI_STRIDE_8(H) (((H+7)>>3)<<3) #define HMI_STRIDE_4(H) (((H+3)>>2)<<2)   #define HMI_VIDEO_STRIDE(W) HMI_STRIDE(W) #define HMI_TEXTURE_STRIDE(W) (((W+3)>>2)<<2)  #define HMI_MAX_RGL_32BIT 0xffffffff #define HMI_MAX_RGL_OVERFLOW 0xffff #define HMI_OPAQUE 255 #define HMI_WHITE_COLOR_ARGB 0xffffff   #define HMI_LAYER_RLE 0 #define HMI_LAYER_SPRITE 1 #define HMI_LAYER_BUFFER 2  #define HMI_LAYER_VIDEOIN 3  #define HMI_RGB_LEN 3 #define HMI_ARGB_LEN 4 #define HMI_RGL_WND_BURST_LEN 128 #define HMI_TRAIL_SEGMENT 2 #define HMI_TRAIL_TOLERATION 0.5  #define ROM_FS_SCRIPT_SWZ 0 #define ROM_FS_WIREMESH01 1 #define LOC_BYTE_PER_PIXEL 4  #define HMI_ANGEL_TO_RADIAN(angel) ((angel)*HMI_PI/180.0f) #define HMI_TRAIL_VERTEX_NUM 16   #ifdef R_CVBS_VIDEO_CAPTURE_ENABLE #ifndef USE_HDMI0_INTERFACE /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr Use full 720 pixels */ #define LOC_CAPTURE_INPUT_WIDTH (714*2) /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr this is double width, since we capture in ITU656; see VDCE API doc */ #else /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr Use max 512 pixels. VI1 -> VO0 capturing cannot use the scalers, thus 1024 is the max. allowed width. */ #define LOC_CAPTURE_INPUT_WIDTH (512*2) /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr this is double width, since we capture in ITU656; see VDCE API doc */ #endif /*USE_HDMI0_INTERFACE*/ #define LOC_CAPTURE_INPUT_HEIGHT 480 #define LOC_CAPTURE_INPUT_STRIDE 1280 #define LOC_CAPTURE_INPUT_STARTX 16 #define LOC_CAPTURE_INPUT_STARTY 20 #define LOC_CAPTURE_INPUT_DELAY 70  #define LOC_CAPTURE_WINDOW_STARTX ((1280-LOC_CAPTURE_WINDOW_SCALED_WIDTH)/2) #define LOC_CAPTURE_WINDOW_STARTY ((480-LOC_CAPTURE_WINDOW_SCALED_HEIGHT)/2) #define LOC_CAPTURE_WINDOW_WIDTH LOC_CAPTURE_WINDOW_SCALED_WIDTH//(LOC_CAPTURE_INPUT_WIDTH/2) /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr here we need the real size */ #define LOC_CAPTURE_WINDOW_SCALED_WIDTH 720 #define LOC_CAPTURE_WINDOW_HEIGHT LOC_CAPTURE_WINDOW_SCALED_HEIGHT//(LOC_CAPTURE_INPUT_HEIGHT) #define LOC_CAPTURE_WINDOW_SCALED_HEIGHT 476 #define LOC_CAPTURE_WINDOW_STRIDE 1280  #define LOC_CAPTURE_SYNCHRONIZED 1 #elif defined(R_LVDS_VIDEO_CAPTURE_ENABLE) #define LOC_CAPTURE_INPUT_WIDTH 800 #define LOC_CAPTURE_INPUT_HEIGHT 480 #define LOC_CAPTURE_INPUT_STRIDE 896 #define LOC_CAPTURE_INPUT_STARTX 100 #define LOC_CAPTURE_INPUT_STARTY 35 #define LOC_CAPTURE_INPUT_DELAY 0  #define LOC_CAPTURE_WINDOW_STARTX ((1280-LOC_CAPTURE_WINDOW_SCALED_WIDTH)/2) #define LOC_CAPTURE_WINDOW_STARTY ((480-LOC_CAPTURE_WINDOW_SCALED_HEIGHT)/2) #define LOC_CAPTURE_WINDOW_WIDTH LOC_CAPTURE_WINDOW_SCALED_WIDTH//(LOC_CAPTURE_INPUT_WIDTH/2) /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr here we need the real size */ #define LOC_CAPTURE_WINDOW_SCALED_WIDTH 720 #define LOC_CAPTURE_WINDOW_HEIGHT LOC_CAPTURE_WINDOW_SCALED_HEIGHT//(LOC_CAPTURE_INPUT_HEIGHT) #define LOC_CAPTURE_WINDOW_SCALED_HEIGHT 432 #define LOC_CAPTURE_WINDOW_STRIDE 896  #define LOC_CAPTURE_SYNCHRONIZED 1 #else #define LOC_CAPTURE_INPUT_WIDTH 0 #define LOC_CAPTURE_INPUT_HEIGHT 0 #define LOC_CAPTURE_INPUT_STRIDE 0 #define LOC_CAPTURE_INPUT_STARTX 0 #define LOC_CAPTURE_INPUT_STARTY 0 #define LOC_CAPTURE_INPUT_DELAY 0  #define LOC_CAPTURE_WINDOW_STARTX 0 #define LOC_CAPTURE_WINDOW_STARTY 0 #define LOC_CAPTURE_WINDOW_WIDTH 0 /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr here we need the real size */ #define LOC_CAPTURE_WINDOW_SCALED_WIDTH 0 #define LOC_CAPTURE_WINDOW_HEIGHT 0 #define LOC_CAPTURE_WINDOW_SCALED_HEIGHT 0 #define LOC_CAPTURE_WINDOW_STRIDE 0  #define LOC_CAPTURE_SYNCHRONIZED 0 #endif  #define LOC_JCUA_UNIT (0u)  #define HMI_PI 3.14159265358979323846    #define LOC_VRAM_IMAGE_COUNT 19  #define HMI_CIRCLE_ANGEL 360 #define HMI_HALF_CIRCLE_ANGEL 180   #define HMI_FONT_BUFFER_LEN 100 #define HMI_DISPLAY_ASCII_BEGIN 32 #define HMI_ALL_FONT_NOT_HIT_LEN 200 #define HMI_NOT_HIT_INVALIDE_INDEX 0xffff  typedef struct { HMI_FONT_CHAR_STR font_code; U08 *pdata; }FONT_BUF_ADDR_STR;   typedef struct { U08 font_id; FONT_BUF_ADDR_STR font_buffer; }MUL_FONT_BUF_ADDR_STR;   typedef struct { UINT32 ticks; U08 *pBuffer; U08 *pData;/*flash*/ }rgl_buffer_img_str;  typedef struct { UINT32 ticks; UINT32 hmi_object_id; U08 *pBuffer;  }rgl_jpg_decode_buffer_str;   typedef struct { r_drw2d_FixedP_t x; r_drw2d_FixedP_t y; }FIX_POINT_TP;  typedef enum { HMI_ROTATION_PRIVATE_AXIS, HMI_ROTATION_PUBLIC_AXIS1, HMI_ROTATION_PUBLIC_AXIS2, /*HMI_ROTATION_AXIS COUNT*/ HMI_ROTATION_AXIS_CNT }hmi_rotation_axis_str;   typedef enum { HMI_IMAGE_NO_COMPRESS, HMI_IMAGE_JPG, HMI_IMAGE_RLE, HMI_IMAGE_ALPHA8, HMI_IMAGE_ALPHA4, HMI_IMAGE_ALPHA2, HMI_IMAGE_ALPHA1, /*HMI_IMAGE COUNT*/ HMI_IMAGE_CNT }rgl_image_type_str;    typedef struct { double X; double Y; double Z;  } vector3d_t;  typedef struct { double X; double Y; double Z; double W;  } vector4d_t;  typedef enum  { /*add by lq*/ HMI_IMG_ALPHA1, HMI_IMG_ALPHA2, HMI_IMG_ALPHA4, /**********/ HMI_IMG_ALPHA8, HMI_IMG_RGB565, HMI_IMG_ARGB8888, HMI_IMG_RGBA8888, HMI_IMG_ARGB6666, HMI_IMG_RGBA6666, HMI_IMG_ARGB1555, HMI_IMG_RGB888, HMI_IMG_RGBX8888, HMI_IMG_RGBA5551, HMI_IMG_ARGB4444, HMI_IMG_RGBA4444, HMI_IMG_CLUT8 } hmi_img_ColorFormat_t;  typedef enum  { HMI_IMG_ATTRIBUTE_RLE_COMPRESSED = (1 << 0), HMI_IMG_ATTRIBUTE_USE_FROM_PERSISTENT_MEMORY = (1 << 1), HMI_IMG_ATTRIBUTE_SWIZZLE = (1 << 2), HMI_IMG_ATTRIBUTE_CLUT = (1 << 3), HMI_IMG_ATTRIBUTE_RLE_DECOMPRESS = (1 << 4), HMI_IMG_ATTRIBUTE_UNUSED = (1 << 5), } hmi_img_Attributes_t;  typedef struct  { const char *Name; const char *PalName; uint32_t Width; uint32_t Height; hmi_img_ColorFormat_t Colorformat; uint32_t Attributes; uint8_t **Index; uint32_t IndexLength; uint32_t IndexEntrys; uint8_t **Data; uint32_t DataLength; } hmi_img_t;  #ifdef __cplusplus extern "C" { #endif   void add_tick_res_manager(void); void qd_texture_manager_init(void); #if ((defined( HMI_MCU_RH850_D1MX ))||(defined( HMI_MCU_RH850_D1HX ))) void qd_jpg_init(void); #endif rgl_image_type_str get_compress_fmt(HMI_IMAGE_ATTR_STR img_attr);  void call_C_hmi_driver_init(void); void call_C_hmi_driver_deinit(void); void locCleanUpVRAM_hmi(void); #if HMI_ALL_FONT_NUMBER > 0 #if ((HMI_DYN_EDIT_TEXTS_NUMBER > 0U) || (HMI_STATIC_TEXTS_NUMBER > 0U))  void call_C_hmi_driver_draw_text(HMI_TEXT_RECT_STR CONST *phmi_text_copy_rect/*screen target and color*/, HMI_TEXT_PROP_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_text_prop_info, HMI_RECT_STR *pclip_rect, HMI_RECT_STR *pdirty_rect, U08 font_id, UINT8 layer #ifdef HMI_CLIP_TEXT ,HMI_CHAR_STR CONST *phmi_clip_char #endif #ifdef HMI_GRAPHIC_RGL ,UINT8 father_alpha #endif ); #endif #endif void call_C_hmi_driver_draw_fill_page( HMI_FILL_PAGE_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_fill_page_prop, HMI_RECT_STR *pclip_rect, HMI_RECT_STR *pdirty_rect, UINT8 layer #ifdef HMI_GRAPHIC_RGL ,UINT8 father_alpha #endif );  void call_C_hmi_driver_gradient_fill_page(HMI_RECT_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_gfill_page_rect, HMI_GRADIENT_FILL_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_gfill_page_prop, HMI_RECT_STR *pclip_rect #ifdef HMI_GRAPHIC_RGL ,UINT8 father_alpha #endif );  void call_C_hmi_driver_draw_image(HMI_RECT_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml pscreen_target, HMI_IMAGE_ATTR_STR img_compress, HMI_RECT_ALPHA_ANGEL_STR *palpha_pos_angel,  HMI_BITMAP_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml pimage_prop_info, HMI_RECT_STR *pclip_rect, HMI_RECT_STR *pdirty_rect, UINT8 layer,  HMI_ROTATION_STR *protation,/*rotation point,NULL mean center point*/ HMI_OBJECT_ID_STR hmi_object_id #ifdef HMI_GRAPHIC_RGL ,UINT8 father_alpha #endif );  void call_C_hmi_driver_draw_imagelist(HMI_RECT_STR CONST *pscreen_target, HMI_IMAGE_ATTR_STR img_compress, HMI_RECT_ALPHA_STR *palpha_pos_angel,  HMI_IMAGE_LIST_STR CONST *phmi_imagelist_prop, HMI_RANGE_STR index, HMI_RECT_STR *pclip_rect, HMI_RECT_STR *pdirty_rect, UINT8 layer, HMI_OBJECT_ID_STR hmi_object_id #ifdef HMI_GRAPHIC_RGL ,UINT8 father_alpha #endif );  void call_C_hmi_driver_draw_scrollbar(HMI_RECT_STR CONST *pscreen_target,  HMI_IMAGE_ATTR_STR img_compress,  /*HMI_IMAGE_LIST_STR CONST *phmi_imagelist_prop,*/ HMI_RANGE_STR cur_range, HMI_RECT_STR *pclip_rect, HMI_RECT_STR *pdirty_rect, HMI_SCROLL_BAR_STR *phmi_scrollbar_prop, UINT8 layer, HMI_OBJECT_ID_STR hmi_object_id #ifdef HMI_GRAPHIC_RGL ,UINT8 father_alpha #endif );  void call_C_hmi_driver_init(void); void call_C_hmi_driver_refresh_LCD(HMI_RECT_STR *pdirty_zone); #if 0 void hmi_driver_init(); void hmi_driver_refresh_LCD();  void hmi_driver_draw_text(HMI_TEXT_RECT_STR CONST *phmi_text_xy_info, HMI_TEXT_PROP_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_text_prop_info, HMI_RECT_STR *pclip_rect #ifdef HMI_CLIP_TEXT  ,HMI_CHAR_STR CONST *phmi_clip_char #endif );  void hmi_driver_draw_fill_page( HMI_FILL_PAGE_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_fill_page_prop,HMI_RECT_STR *pclip_rect); void hmi_driver_gradient_fill_page(HMI_RECT_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_gfill_page_rect, HMI_GRADIENT_FILL_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_gfill_page_prop,HMI_RECT_STR *pclip_rect); void hmi_driver_draw_image(HMI_RECT_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_image_copy_rect,HMI_FILE_STR CONST *pfile,HMI_FILE_STR CONST *pfile_a,HMI_BITMAP_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_image_prop_info,HMI_RECT_STR *pclip_rect); void hmi_driver_draw_imagelist(HMI_RECT_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_imagelist_copy_rect,HMI_FILE_STR CONST *pfile, HMI_FILE_STR CONST *pfile_a,HMI_IMAGE_LIST_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_imagelist_prop,UINT8 index,HMI_RECT_STR *pclip_rect); void hmi_driver_draw_scrollbar(HMI_RECT_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_scrollbar_copy_rect,HMI_FILE_STR CONST *pfile,HMI_FILE_STR CONST *pfile_a, HMI_SCROLL_BAR_STR CONST hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml phmi_scrollbar_prop,HMI_RANGE_STR cur_range,HMI_RECT_STR *pclip_rect); #endif void hmi_enable_video_layer(BOOLEAN en); void loc_Error_hmi(r_drw2d_Error_t err); void get_texture_res_manager(HMI_OBJECT_ID_STR hmi_object_id, r_drw2d_Texture_t *ptexture, U08 *pdata, U32 data_len,  U32 width,U32 height, BOOLEAN rotation, rgl_image_type_str img_type, U08 alpha, HMI_FONT_CHAR_STR char_code/*only used in text*/ ); U08 hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml get_buffer_res_manager(HMI_OBJECT_ID_STR hmi_object_id, U08 *pdata/*flash data address*/,  U32 data_len ); U08 hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml get_font_buffer_res_manager(U08 font_id, HMI_FONT_CHAR_STR char_code,  U08 *pdata /*flash data address*/,  U32 data_len ); void decode_JPG2Mem(r_drw2d_Texture_t *ptexture_jpg,U08 layer, HMI_RECT_ALPHA_ANGEL_STR *palpha_pos_angel, HMI_RECT_STR disp_rect);  void hmi_driver_swap_buffer(HMI_RECT_STR *pdirty_zone);  void free_all_buffer_res_manager(void); void free_all_jpg_buffer_res_manager(void); BOOLEAN free_jpg_buffer_res_manager(void); UINT8 get_layer_from_depth(SINT8 depth); void hmi_clear_dirty_layer(HMI_RECT_STR *pdirty_zone); void hmi_driver_set_render_buffer(HMI_RECT_STR *pdirty_zone); void hmi_driver_clear_rgl_window(void); void hmi_driver_create_rgl_window(HMI_RECT_STR hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml rect,UINT8 layer); void *hmi_get_window(UINT8 layer);   void hmi_driver_creat_capture(r_wm_CapMode_t fmt,U16 width,U16 heigh,BYTE layer); void hmi_display_video(HMI_VIDEO_INFO_STR CONST *pfmt,HMI_RECT_STR *ppos,BYTE *pvideo_status,BYTE layer); void call_C_hmi_driver_draw_cube(HMI_RECT_STR CONST *pscreen_target, HMI_CUBE_STR CONST *pcube_str, HMI_CUBE_FACE_STR *pcube_textrue, HMI_CUBE_FACE_STR *pbump_textrue, HMI_RECT_STR *pclip_rect, HMI_RECT_STR *pdirty_rect, UINT8 layer,  /*HMI_OBJECT_ID_STR hmi_object_id,*/ UINT8 father_alpha, HMI_CUBE_AXIS_PROP CONST *paxis, S3POINT_TP *protation_axis ); void off_all_sprite(UINT8 layer_index); BOOLEAN is_buffer_layer(UINT8 layer); void clear_layer_video_status(void); void set_layer_video_status(UINT8 layer,HMI_OBJECT_ID_STR object_id,BYTE *pvideo_status); void off_layer_video(void); void clear_layer_video_status(void); void hmi_driver_animated_trail(HMI_ROTATION_TRAIL_STR CONST *ptail,  BYTE trail_attr, HMI_RECT_STR hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml pscreen_target, HMI_IMAGE_ATTR_STR img_compress, HMI_RECT_ALPHA_ANGEL_STR *palpha_pos_angel,  HMI_BITMAP_STR hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml pimage_prop_info, HMI_RECT_STR *pclip_rect, HMI_RECT_STR *pdirty_rect, UINT8 layer,  HMI_ROTATION_STR *protation,/*rotation point,NULL mean center point*/  float_32 pointer_angel, UINT8 father_alpha, HMI_BITMAP_STR CONST *pimage_pointer_prop_info, HMI_RECT_STR *ptrail_rect ); void Blur_Buffer(r_drw2d_Buffer_t *src_p, r_drw2d_Buffer_t *dst_p); BOOLEAN hmi_alloc_blur_buffer(r_drw2d_Texture_t *ptexture); void free_image_res_manager(HMI_OBJECT_ID_STR hmi_object_id); void hmi_release_font_buffer(void); void hmi_init_font_buffer(void); UINT8 get_popup_window_layer(void); void hmi_driver_set_page_alpha(UINT8 page_alpha); #if HMI_ALL_FONT_NUMBER > 0 #if ((HMI_DYN_EDIT_TEXTS_NUMBER > 0U) || (HMI_STATIC_TEXTS_NUMBER > 0U)) HMI_TEXT_LENGTH_STR hmi_driver_get_string_len( HMI_CHAR_STR *phmi_string,UINT8 font_id); #endif #endif void hmi_driver_send_cmdlist(void); void hmi_get_union_rect(HMI_RECT_STR CONST *p_r1,HMI_RECT_STR CONST *p_r2,HMI_RECT_STR *phmi_temp_rect); //void call_C_hmi_driver_2buffer_copy(HMI_RECT_STR *pdirty_rect,UINT8 layer); U08 hmi_action_engine.c hmi_action_engine.h hmi_all_struct_include.h HMI_Data hmi_driver_cfg.h hmi_engine.c hmi_engine.h hmi_engine_cfg.h hmi_loop.c hmi_loop.h hmi_loop_driver.c hmi_loop_driver.h hmi_reset.c hmi_reset.h hmi_rgl_driver.c hmi_rgl_driver.h HMI_Source hmi_status.c hmi_status.h hmi_system.h hmi_task_touchpanel.c hmi_task_touchpanel.h hmi_task_touchpanel_driver.c hmi_task_touchpanel_driver.h HMI_Tool hmi_user_interface.c hmi_user_interface.h QD_HMI.gpj zs12_main_project.xml zs12_project_page_0816_bginternal.xml zs12_project_page_0820_hmi.xml zs12_project_page_0823_release.xml zs12_project_page_0828.xml zs12_project_page_0830.xml zs12_project_page_0831_release.xml zs12_project_page_0904_release.xml zs12_project_page_0922_RELEASE.xml zs12_project_page_1016_RELEASE_v2.0.xml zs12_project_page_lyy 0808-FUNCBACK-INTERNAL.xml zs12_project_page_lyy 0808-test-rle-internal.xml zs12_project_page_XIAOSA_0808.xml hmi_rgl_load_to_vram(HMI_OBJECT_ID_STR hmi_object_id, U08 *pdata/*flash data address*/,  U32 data_len );    #ifdef __cplusplus } #endif  #endif
