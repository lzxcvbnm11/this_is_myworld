/* **************************************************************************** PROJECT : SFMA driver FILE : $Id: yd_sfma_flash.h 3935 2014-09-23 08:52:32Z golczewskim $ ============================================================================ DESCRIPTION Driver for the SFMA(Serial Flash Memory Interface) macro ============================================================================ C O P Y R I G H T ============================================================================ Copyright (c) 2013 - 2014 by Renesas Electronics (Europe) GmbH. Arcadiastrasse 10 D-40472 Duesseldorf Germany All rights reserved. ============================================================================  DISCLAIMER  LICENSEE has read, understood and accepted the terms and conditions defined in the license agreement, especially the usage rights. In any case, it is LICENSEE's responsibility to make sure that any user of the software complies with the terms and conditions of the signed license agreement.  **************************************************************************** */  /*************************************************************************** Title: SFMA Flash Driver  SFMA Main Module Internal Interface  Only the driver modules shall include this header. */  #ifndef YD_SFMA_FLASH_H #define YD_SFMA_FLASH_H  #ifdef __cplusplus extern "C" { #endif   /*************************************************************************** Section: Global functions */  /*************************************************************************** Function: YD_SFMA_FlashSectorErase  Description: This function uses the SPI transfer mode to erase the serial flash memory. This function sets the SPI transfer mode which is necessary to send an erase command.  Parameter: Unit - The parameter specifies the instance number. Addr - The parameter specifies the erase address of the serial flash memory. Config - This is a pointer to the <yd_sfma_SpiConfig_t> structure to the configuration of the unit.  Return value: See <yd_sfma_Error_t>. */ yd_sfma_Error_t YD_SFMA_FlashSectorErase(const uint32_t Unit, const uint64_t Addr, const yd_sfma_SpiConfig_t *Config);  /*************************************************************************** Function: YD_SFMA_FlashBulkErase  see: <yd_sfma_flash.h> */ yd_sfma_Error_t YD_SFMA_FlashBulkErase(const uint32_t Unit, const yd_sfma_SpiConfig_t *Config);  /*************************************************************************** Function: YD_SFMA_FlashDataWrite  Description: This function uses the SPI transfer mode to write the serial flash memory. This function sets the SPI transfer mode which is necessary to send a writecommand. When Config->DataWidth of the argument is 4 bits, the page program command corresponding to Quad is used. When Config->DataWidth of the argument is 1 bit or 2bits, the page program command corresponding to Single is used.  Parameter: Unit - The parameter specifies the instance number. Addr - The parameter specifies the write address of the serial flash memory. Buf - This is a pointer to the address of buffer. Size - The parameter specifies the data size (in bytes) to write. Config - This is a pointer to the <yd_sfma_SpiConfig_t> structure to the configuration of the unit.  Return value: See <yd_sfma_Error_t>. */ yd_sfma_Error_t YD_SFMA_FlashDataWrite(const uint32_t Unit, const uint64_t Addr, const uint8_t r_sfma_api.c r_sfma_api.h r_sfma_driver_api.h r_sfma_flash.c r_sfma_flash.h r_sfma_iodevice_api.h r_sfma_spibsc.c r_sfma_spibsc.h r_sfma_spibsc_drv.c r_sfma_sys.h sfma_params.h yd_config_sfma.h yd_dev_api.h yd_dev_asm.s yd_sfma_api.c yd_sfma_api.h yd_sfma_flash.c yd_sfma_flash.h yd_sfma_spibsc.c yd_sfma_spibsc.h yd_sfma_spibsc_drv.c yd_sfma_sys.h yd_sys_sfma.c const Buf, const int32_t Size, const yd_sfma_SpiConfig_t *Config);  /*************************************************************************** Function: YD_SFMA_FlashDataRead  Description: This function uses the SPI transfer mode to read the serial flash memory. This function sets the SPI transfer mode which is necessary to send a write command. When Config->DataWidth of the argument is 4 bits, the read command corresponding to Quad is used. When Config->DataWidth of the argument is 2 bits, the read command corresponding to Dual is used. When Config->DataWidth of the argument is 1 bit, the read command corresponding to Single is used.  Parameter: Unit - The parameter specifies the instance number. addr - The parameter specifies the read address of the serial flash memory. Buf - This is a pointer to the address of buffer. Size - The parameter specifies the data size (in bytes) to read. Config - This is a pointer to the <yd_sfma_SpiConfig_t> structure to the configuration of the unit.  Return value: See <yd_sfma_Error_t>. */ yd_sfma_Error_t YD_SFMA_FlashDataRead(const uint32_t Unit, const uint64_t Addr, uint8_t r_sfma_api.c r_sfma_api.h r_sfma_driver_api.h r_sfma_flash.c r_sfma_flash.h r_sfma_iodevice_api.h r_sfma_spibsc.c r_sfma_spibsc.h r_sfma_spibsc_drv.c r_sfma_sys.h sfma_params.h yd_config_sfma.h yd_dev_api.h yd_dev_asm.s yd_sfma_api.c yd_sfma_api.h yd_sfma_flash.c yd_sfma_flash.h yd_sfma_spibsc.c yd_sfma_spibsc.h yd_sfma_spibsc_drv.c yd_sfma_sys.h yd_sys_sfma.c const Buf, const int32_t Size, const yd_sfma_SpiConfig_t *Config);  /*************************************************************************** Function: YD_SFMA_FlashProtectModeSet  Description: This function uses the SPI transfer mode to make settings to the internal registers of the serial flash memory. The protection of a serial flash memory is released or set.  Parameter: Unit - The parameter specifies the instance number. Req - The parameter specifies the request to the serial flash memory. Config - This is a pointer to the <yd_sfma_SpiConfig_t> structure to the configuration of the unit.  Return value: See <yd_sfma_Error_t>. */ yd_sfma_Error_t YD_SFMA_FlashProtectModeSet(const uint32_t Unit, const yd_sfma_Req_t Req, const yd_sfma_SpiConfig_t *Config); #ifdef __cplusplus } #endif  #endif /bin /cmd /dev /etc /git-bash.exe /git-cmd.exe /LICENSE.txt /mingw64 /proc /ReleaseNotes.html /tmp /unins000.dat /unins000.exe /unins000.msg /usr YD_SFMA_FLASH_H */
